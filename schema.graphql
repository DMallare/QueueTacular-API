# scalar GraphQLDate

enum QueueStatusType {
    Open
    Closed
}

enum QueueItemStatusType {
    Waiting
    Served
    Removed
}

# Issue -> QueueItem
# IssueTable -> Queue

# Person (QueueItem) in the queue
type QueueItem {
    # _id: ID!
    id: Int!
    status: QueueItemStatusType!
    person: User
    # created: GraphQLDate!
    wait: Int
    description: String
}

type Queue {
    # _id: ID!
    # notarealdb generates a String ID
    id: String!
    title: String!
    status: QueueStatusType!
    owner: User!
    description: String
    maxParticipants: Int
    maxWaitTime: Int
    items: [QueueItem]
}

type User {
  id: Int!
  signedIn: Boolean!
  name: String!
  email: String!
}


input UserInput {
  name: String!
  email: String!
}


input QueueItemInput {
  status: QueueItemStatusType = Waiting
  # person: UserInput!
  description: String
}



input QueueInput {
  title: String!
  status: QueueStatusType = Open
  description: String
  maxParticipants: Int
  maxWaitTime: Int
}

##### Top level declarations

type Query {
  about: String!
  # notarealdb generates a String ID
  showQueue(id: Int!): Queue
}

type Mutation {
  addQueue(newQueue: QueueInput!): Queue
  # addItem(item: QueueItemInput!): QueueItem
}